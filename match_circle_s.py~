from __future__ import division
import numpy as np

def match_circle_s(data1, data2, phase, m_max):

	T1_bin = [[] for _ in range(360)]
	T2_bin = [[] for _ in range(360)]

	for i in range(len(data1[:,1])):
		iy = int(data1[i,1])
		if data1[i,0] != 0:
			T1_bin[iy].append(data1[i,0])
	T1_bin = np.array([np.array(T1i) for T1i in T1_bin])
	
			
	for i in range(len(data2[:,2])):
		iy = int(data2[i,1])
		if data2[i,0] != 0:      	  
			T2_bin[iy].append(data2[i,0])
	T2_bin = np.array([np.array(T2i) for T2i in T2_bin])
	
	T1_binn = np.zeros((2,len(T1_bin)))
	for i in range(len(T1_bin)):
		T1_binn[1,i] = np.sum(T1_bin[i])
		T1_binn[0,i] = T1_bin[i].size

	T2_binn = np.zeros((2,len(T2_bin)))
	for i in range(len(T2_bin)):
		T2_binn[1,i] = np.sum(T2_bin[i])
		T2_binn[0,i] = T2_bin[i].size

	T = np.zeros((2,len(T1_binn[0,:])))
	

	for i in range(len(T1_binn[1,:])):
		if T1_binn[0,i] != 0:
			T[0,i] = T1_binn[1,i]/T1_binn[0,i]
		else:
			T[0,i] = 0
		if T2_binn[0,i] != 0:
			T[1,i] = T2_binn[1,i]/T2_binn[0,i]
		else:
			T[1,i] = 0
	
	T_b = np.zeros((2,len(T[0])), dtype=complex)
	for i in range(len(T_b[0])):
		T_b[0,i] = np.exp(-1j*i)
		T_b[1,i] = np.exp(-1j*i)
		
	s_num = 0
	s_den = 0
	for m in range(m_max):
		T_b_m = T_b**m
		#T_b_m_x = T_b_x**m
		#T_b_m_y = T_b_y**m
		T_m = T*T_b_m
		#T_m_x[0] = (T[0]+std_dev[0])*T_b_m_x[0]
		#T_m_x[1] = T[1]*T_b_m_x[1]
		#T_m_y[0] = T[0]*T_b_m_y[0]
		#T_m_y[1] = (T[1]+std_dev[1])*T_b_m_y[1]
		T2_m_star = np.conj(T_m[1])
		#T2_m_star_x = np.conj(T_m_x[1])
		#T2_m_star_y = np.conj(T_m_y[1])
		s_num += (m/(2*np.pi**2))*np.sum(T_m[0])*np.sum(T2_m_star)*np.exp(-1j*m*phase)
		s_den += (m/(4*np.pi**2))*((np.abs(np.sum(T_m[0])))**2+(np.abs(np.sum(T_m[1])))**2)
	
	if s_den != 0:
		s = s_num/s_den
	else:
		s=0
	
	return s#, s_err
